package com.stock.stockify.domain.inventory;

import com.stock.stockify.domain.user.User;
import com.stock.stockify.global.auth.PermissionChecker;
import com.stock.stockify.global.exception.PermissionDeniedException;
import com.stock.stockify.global.security.UserContext;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

// InventoryStatusLog 관련 비즈니스 로직 처리 서비스 클래스
@Service
@RequiredArgsConstructor
@Transactional
public class InventoryStatusLogService {

    private final InventoryStatusLogRepository inventoryStatusLogRepository;
    private final InventoryItemRepository inventoryItemRepository;
    private final PermissionChecker permissionChecker;

    // 재고 수량 변경 시 로그 자동 기록
    public void logChange(InventoryItem item, Action action, int quantityChange) {
        User user = UserContext.getCurrentUser();
        User owner = user.getAdminOwner();

        InventoryStatusLog log = InventoryStatusLog.builder()
                .inventoryItem(item)
                .action(action)
                .quantity(quantityChange)
                .triggeredBy(user)
                .owner(owner)
                .warehouseId(item.getWarehouseId())
                .build();

        inventoryStatusLogRepository.save(log);
    }

    // 소유자 기준 전체 기록 조회
    public List<InventoryStatusLog> getMyLogs() {
        User user = UserContext.getCurrentUser();
        User owner = user.getAdminOwner();
        if (!owner.isEmailVerified()) {
            throw new PermissionDeniedException("이메일 인증이 완료되어야 카테고리를 생성할 수 있습니다.");
        }
        permissionChecker.check(user.getId(), "INVENTORY_LOG_VIEW");
        return inventoryStatusLogRepository.findByOwner(owner);
    }

    // 소유자 + 창고 기준 기록 조회
    public List<InventoryStatusLog> getLogsByWarehouse(Long warehouseId) {
        User user = UserContext.getCurrentUser();
        User owner = user.getAdminOwner();
        if (!owner.isEmailVerified()) {
            throw new PermissionDeniedException("이메일 인증이 완료되어야 카테고리를 생성할 수 있습니다.");
        }
        permissionChecker.checkAccessToWarehouse(user.getId(), warehouseId, "INVENTORY_LOG_VIEW");
        return inventoryStatusLogRepository.findByOwnerAndWarehouseId(owner, warehouseId);
    }
}
